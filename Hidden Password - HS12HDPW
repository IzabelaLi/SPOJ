/********************************************************************************************************************
Program jest rozwiązaniem zadania ze SPOJa pt. "Hidden password". Zostało ono zweryfikowane i zatwierdzone przez system.
Nie posiada ono zabezpieczenia przed wprowadzeniem nieprawidłowych danych przez użytkownika. Ma następującą treść:
*********************************************************************************************************************
You are given two alphanumeric ASCII strings. An ancient manuscript says those strings contain a hidden password. Decode it!
The first string may be grouped into tuples of six characters each. For each such 6-tuple, taking from the i-th character
(start counting from 0) the i-th bit of its ASCII code gives you a number (call it a), and likewise taking the (i+3 mod 6)-th
bits gives you another number (call it b).

These two numbers tell you about the next two characters to be included in the password, namely the a-th and the b-th 
character from the second string (count starting from 0 as usual).

Input
First, you are given t (t<100) - the number of test cases.

Each of the test cases starts with one number n (n < 100) - the number of 6-tuples in the first string, followed by the two 
strings in separate lines (please have a look at the example to see the correct format). The second string is 64 characters long.

Successive test cases are separated by an empty line.

Output
For each of the test cases, output its hidden password in a separate line.
*********************************************************************************************************************
Example
Input:
2
2
qwe345 rf3Arg
XSBSRasdew9873465hkldsfsalndfvnfq489uqovkLKJHaeDaae555Sk5asdpASD

3
2S4J5K 111111 lrtb2A
isimgsow45ipfgisd56wfgngdfcdkgc7kKKKkuuJJgfstdygQdWORQADFSLKF2K8

Output:
keep
coding
*********************************************************************************************************************
Explanation
Let us have a look at the first 6-tuple: qwe345

char. ASCII code
  q   113 = 01110001B      
  w   119 = 01110111B
  e   101 = 01100101B
  3    51 = 00110011B
  4    52 = 00110100B
  5    53 = 00110101B

a(blue bits)  = 110111B = 55
b(green bits) = 101110B = 46

*********************************************************************************************************************
*********************************************************************************************************************
*********************************************************************************************************************/
#include <iostream>
#include <bitset>
#include <string>
#include <math.h>
#include <limits>

using namespace std;

/*****************************************************************************/
//stała liczba 6-literowych krotek
const short n=6;

//dane podawane przez użytkownika
short liczba_wyrazow;
short liczba_krotek[100];
string krotki[100];
string kod[100];

//tablice liczb które będą wyznaczone wg algorytmu, potrzebne do zdekodowania 
//wyrazu
int liczby_a[100];
int liczby_b[100];
int s;
int ulozone[200];
string rozwiazanie[100];

//wczytywanie potrzebnych danych od użytkownika
/*****************************************************************************/
void Wczytaj_Dane()
{   //Komunikat pomocny przy samodzielnym testowaniu zadania
    //cout<<"Podaj liczbę wyrazów: ";
    cin>>liczba_wyrazow;
    cout<<endl;
    
    for (int i=0; i<liczba_wyrazow; i++)
    {
        //Komunikat pomocny przy samodzielnym testowaniu zadania
        //cout<<"Podaj liczbę krotek "<<i+1<<". wyrazu: ";
        cin>>liczba_krotek[i];
        cout<<endl;
        //Komunikat pomocny przy samodzielnym testowaniu zadania
        //cout<<"Podaj 6-znakowe krotki oddzielone spacja: ";
        std::cin.ignore( std::numeric_limits < std::streamsize >::max(), '\n' );
        getline(cin,krotki[i]);
        cout<<endl;
        //Komunikat pomocny przy samodzielnym testowaniu zadania
        //cout<<"Podaj 64-znakowy kod: ";
        cin>>kod[i];
        cout<<endl;
    }
}
//Funkcja zamieniająca liczbę binarną będącą w postaci String na liczbę dziesiętną Int
/*****************************************************************************/
int zamien_na_int(string co_zamienic)
{
    int Ascii=0;

    for (int i=0; i<co_zamienic.length(); i++)
    {
        if (co_zamienic[i]=='1')
        {
            Ascii+=pow(2,i);
        }
    }
    
return Ascii;
}
//Funkcja która wyznacza liczby a i b z danych krotek podanych przez użytkownika
/*****************************************************************************/
void Wyznacz_Liczby()
{
    //Suma zliczająca ilość liczb a/b w tablicy. Liczby a i b dodawane będą
    //jednocześnie więc ich suma zawsze będzie równa.
    s=0;
   //Pętla wyznaczjąca liczby a i b z każdej krotki, wykonuje się tyle razy, 
   //ile wyrazów ma mieć hasło, przy czym dla każdego wyrazu do rozkodowania
   //używany jest inny kod
   for (int i=0; i<liczba_wyrazow; i++)
   {    //tablica_binarnych[] to tablica, których przechowywane będą kolejne znaki
        //krotek przekonwertowane na ich binarny kod Ascii w postaci String.
        //Będzie miała rozmiar równy ilości krotek pomnożonej przez stałą liczbę
        //znaków (6) oraz liczbie spacji między nimi.
        int rozmiar_tablicy=n*liczba_krotek[i]+liczba_krotek[i]-1;
        string tablica_binarnych[rozmiar_tablicy];
        //tab_a[] i tab_b[] to tablice przechowujące odpowiednie znaki z tablicy:
        //-tablica_binarnych- wgl algorytmu potrzebnego do uzyskania kolejno
        //liczb a i b
        string tab_a[n*liczba_krotek[i]];
        string tab_b[n*liczba_krotek[i]];
        //tablice a[] i b[] przechowują liczby a i b - liczby uzyskane odpowiednio 
        //z tablic:tab_a[] i tab_b[]
        string a[liczba_krotek[i]];
        string b[liczba_krotek[i]];
        //inty_a[] oraz inty_b[] to tablice z liczbami a i b zamienione na postać
        //dziesiętną potrzebną do rozszyfrowania kodu
        int inty_a[liczba_krotek[i]];
        int inty_b[liczba_krotek[i]];
        
        int dlugosc=krotki[i].length();
        //zamiana znaków krotek na postać binarną kodu Ascii, jednak do postaci
        //łańcuchu znaków tak, aby ułatwić dalsze odkodowanie hasła.
        for(int ii=0; ii<dlugosc; ii++)
        {
            string binarnie=(bitset<8>(krotki[i].c_str()[ii])).to_string();
            tablica_binarnych[ii]=binarnie;
        }

        int k,i1,j;
        k=7; i1=j=0;
        //Wyznaczenie odpowiednich znaków wg podanego algorytmu z tablica_binarnych
        //potrzebnych aby znaleźć liczby a i b.
        while (i1<rozmiar_tablicy)
        {   //Każdy co siódmy wyraz z tablicy jest pomijany, ponieważ zawiera on 
            //spację która oddziela poszczególne krotki, bowiem zapisywane były
            //one jako łańcuch znaków
            if ((i1+1)%(n+1)==0)
            {
                i1++;
                k=7;
            }
       
            tab_a[j]=tablica_binarnych[i1][k];
            tab_b[j]=tablica_binarnych[i1][7-((j+3)%6)]; //7- ponieważ znak brany jest od końca
            k--;
            j++;
            i1++;
        }
    
        int p,r;
        p=r=0;
        //Wyznaczenie liczb a i b przez podzielenie znaków z tablic tab_a[] i 
        //tab_b[] na 6 znakowe wyrazy
        for (int iiii=0; iiii<n*liczba_krotek[i]; iiii++)
        {
            a[p]+=tab_a[r];
            b[p]+=tab_b[r];
            r++;
            //Każdy co szósty znak jest znacznikiem który informuje, że kolejne
            //liczby z tab_a[] i tab_b[] należy zapisać pod kolejnym indeksem 
            //w tablicy a[] i b[], w ten sposób dzieląc znaki "hurtowo" znajdujące
            //się w tablicach na poszczególne wyrazy
            if ((iiii+1)%n==0)
            {
                p++;
            }
        }
        
        for (int iii=0; iii<liczba_krotek[i]; iii++)
        {//Wyznaczenie liczb a i b w postaci dziesiętnej
            inty_a[iii]=zamien_na_int(a[iii]);
            inty_b[iii]=zamien_na_int(b[iii]);
        //Wpisanie liczb a i b w postaci dziesiętnej do tablicy globalnej    
            liczby_a[s]=inty_a[iii];
            liczby_b[s]=inty_b[iii];
            s++;
        }
   }
}
//Funkcja, która ze znalezionych liczb a i b zwraca znak kodu odpowiadający pozycji
//liczb a i b.
/*****************************************************************************/
char Dekoduj(int liczba, string kod)
{
    return kod[liczba];
}
//Funkcja wyznaczjąca ostateczne rozwiazanie zadania
/*****************************************************************************/
void Wyznacz_Rozwiazanie()
{   //Pętla w której liczby a i b, znajdujące się w oddzielnych tablicach są 
    //ze sobą łączone w jednej, naprzemiennie i w odpowiedniej kolejności
    int j=0;
    for (int i=0; i<2*s; i=i+2)
    {
        ulozone[i]=liczby_a[j];
        ulozone[i+1]=liczby_b[j];
        j++;
    }
    //Funkcja wyznaczjąca znaki kodu za pomocą liczb a i b znajdujących się w
    //tablice ulozone[] za pomocą funkcji Dekoduj() i zapisująca do tablicy
    //rozwiazanie[]
    int k=0;
    for (int i=0; i<s; i++)
    {
        for (int m=0; m<2*liczba_krotek[i]; m++)
        {
            rozwiazanie[i]+=Dekoduj(ulozone[k], kod[i]);
            k++;
        }
    }
}
//Funkcja wyświetlająca rozwiązanie
/*****************************************************************************/
void Wyswietl()
{
    for (int i=0; i<s; i++)
    {
       cout<<rozwiazanie[i]<<endl;
    }
}
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
int main()
{
    Wczytaj_Dane();
    Wyznacz_Liczby();
    Wyznacz_Rozwiazanie();
    Wyswietl();

    return 0;
}
/*****************************************************************************/
